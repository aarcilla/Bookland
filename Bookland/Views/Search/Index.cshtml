@model Bookland.Models.SearchViewModel

@{
    ViewBag.Title = "Search Results: " + @Model.SearchQuery;
    bool incompleteMatchesHeading = false;
}

<h2>@ViewBag.Title</h2>

@if (Model.SearchResults != null && Model.SearchResults.Count() > 0) 
{
    <p>Number of results: @Model.TotalNumResults</p>
    <table id="search-table">
        <thead>
            <tr>
                <th class="image-col"></th>
                <th class="prod-col"></th>
                <th class="prc-col"></th>
                <th class="addcart-col"></th>
            </tr>
        </thead>
        <tbody>
            @if (Model.SearchResults.First().IncompleteMatch && Model.CurrentPage == 1)
            {
                <tr><td colspan="4">No complete matches found.</td></tr>
            }

            @foreach (var searchResult in Model.SearchResults)
            {
                if (searchResult.IncompleteMatch && !incompleteMatchesHeading)
                {
                    // All following search results in current iteration are incomplete matches (due to sort order), 
                    // so include a sub-heading insinuating it
                    @: <tr><td colspan="4"><strong>You might also be interested in...</strong></td></tr>
                    incompleteMatchesHeading = true;
                }
                <tr>
                    <td class="image-col">
                        <a href="@Url.Action("ProductDetails", "Home", new { productID = searchResult.Product.ProductID })">
                            @if (!searchResult.Product.IsImageInformationNullOrEmpty)
                            {
                                string getImageUrl = Url.Action("GetImage", "Home", new { area = "", productID = searchResult.Product.ProductID });
                                <img src="@getImageUrl" alt="IMG" height="100" />
                            }
                            else
                            {
                                <img src="~/Content/Images/placeholder.gif" height="100" />
                            }
                        </a>
                    </td>
                    <td>
                        <a href="@Url.Action("ProductDetails", "Home", new { productID = searchResult.Product.ProductID })">
                            <strong>@searchResult.Product.Name</strong> (@searchResult.Product.Year)</a> <br />
                        @if (searchResult.Product.Description.Length > 250) {
                            @: @searchResult.Product.Description.Substring(0, 250)...
                        }
                        else {
                            @: @searchResult.Product.Description <br />
                        }    
                    </td>
                    <td>
                        @string.Format("{0:c}", searchResult.Product.Price)
                    </td>
                    <td>
                        @using (Html.BeginForm("CartItemAdd", "Cart"))
                        {
                            @Html.AntiForgeryToken()
                            
                            @Html.Hidden("productID", searchResult.Product.ProductID)
                            @Html.Hidden("returnUrl", Request.Url.PathAndQuery)
                            
                            <input type="submit" value="Add to cart" />
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div id="searchPageNavigation">
        @using (Html.BeginForm("Index", "Search", FormMethod.Get))
        {
            @Html.Hidden("searchQuery", Model.SearchQuery)

            if (Model.CurrentPage > 1)
            {
                @Html.ActionLink("<", "Index", new { searchQuery = Model.SearchQuery, page = (Model.CurrentPage - 1) }, 
                    new { @class = "pageNavArrow" })
            }

            @Html.DropDownList("page", Model.PagesSelectList, new { onchange = "submit()" })

            @: out of @Model.TotalNumPages
            <noscript><input type="submit" value="Go" /></noscript>

            if (Model.CurrentPage < Model.TotalNumPages)
            {
                @Html.ActionLink(">", "Index", new { searchQuery = Model.SearchQuery, page = (Model.CurrentPage + 1) },
                        new { @class = "pageNavArrow" })
            }
        }
    </div>
}
else
{
    <p>No products found.</p>
}